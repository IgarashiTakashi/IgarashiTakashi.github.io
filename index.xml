<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Children of the earth</title>
    <link>https://IgarashiTakashi.github.io/</link>
    <description>Recent content on Children of the earth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Nov 2018 21:46:39 +0800</lastBuildDate>
    
	<atom:link href="https://IgarashiTakashi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>高并发及redis</title>
      <link>https://IgarashiTakashi.github.io/post/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8F%8Aredis/</link>
      <pubDate>Fri, 23 Nov 2018 21:46:39 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%8F%8Aredis/</guid>
      <description>高并发架构 在业务的最初期，由于业务和用户的体量比较小，可能采用单机就足够了。随着业务的增长，用户量和并发请求量都会不断上升。当增长到一定的瓶颈的时候，系统能否抗住压力，就需要采取一些方案了。这就是著名的C10K，甚至C100K，C1000K的问题。
一般我们会从2个层面去解决这些问题：硬件层面和软件架构层面。
硬件层面 硬件层面，我们可以进行纵向扩展和横向扩展。
纵向扩展就是增加硬件的性能和配置。这个很好理解，比如采用配置更高的服务器设备和更大带宽的网络，数据库采用Oracle。纵向扩展实施起来简单，缺点是费钱；而且硬件的性能都有上限，最终还是要靠横向扩展。
横向扩展就是购买多台机器，通过负载均衡来提供服务。比如：1台不行就10台，10台不行就100台。数据库也是，数据量太大就分库分表。
软件架构层面 软件层面可以细分为很多方面，比如缓存，消息队列，数据库优化，微服务架构。
对于大多数系统，数据库都是“压倒骆驼的最后一根稻草”，是最容易引起瓶颈的问题所在。我们从架构层面尽量减少到达数据库的访问。
缓存其实就是将高频访问的数据进行缓存，获取的时候先从缓存中取，然后返回给客户端；这样就大大减少了对数据库的访问次数。缓存是成本最低，见效最高的一种方案，也是今天重点学习的内容。
消息队列可以用来应对秒杀场景的高并发，我们将所有的请求看做消息存储到消息队列，然后立即返回给客户端。然后在按照顺序从队列中取消息，一条一条的处理；可以避免系统在海量并发下造成崩溃。
数据库优化其实就SQL技巧和索引的优化了；也可以采用适合应用场景的数据库。比如如果没有事务要求，可以采用性能更高的NoSQL数据库（比如MongoDB）；如果有大量的搜索需求，可以采用ElasticSearch。
微服务架构是将单体架构进行拆分，可以更好的优化具有性能瓶颈的服务，提升单个服务的性能。
Redis使用 介绍 Redis是目前最流行的缓存数据库，它将数据存到内存中，并支持持久化；所以读取速度非常快，普通机器也能轻松达到10w+/s；并支持丰富的数据类型，如key/value，list，map，set等。
官网：https://redis.io/
中文网站：http://www.redis.net.cn/
redis-cli使用 redis-cli是Redis提供的命令行客户端，可以方便执行Redis命令。简单演示命令行的操作：
 get/set del xxx rpush/lrange  node_redis客户端 Redis有各种语言的客户端实现，就像我们使用MySQL驱动连接MySQL数据库一样，我们需要使用NodeJs的Redis客户端去操作Redis数据库。在NodeJs中最为好用的是node_redis实现。
node_redis：https://github.com/NodeRedis/node_redis
具体做法是：先将热点数据存储到Redis中，业务模块取数据的时候优先从缓存中获取。
代码演示热数据的准备和从缓存中取数据：
&#39;use strict&#39; require(&#39;./db&#39;) let redis = require(&#39;redis&#39;); let util = require(&#39;util&#39;); let client = redis.createClient(&#39;redis://127.0.0.1:6379&#39;); let getAsync = util.promisify(client.get).bind(client) let lrangeAsync = util.promisify(client.lrange).bind(client) let existsAsync = util.promisify(client.exists).bind(client) client.on(&#39;error&#39;, err=&amp;gt;{ console.log(&#39;redis connect fail: &#39; + err.toString()); }); let Product = require(&#39;.</description>
    </item>
    
    <item>
      <title>Solidity开发环境搭建</title>
      <link>https://IgarashiTakashi.github.io/post/solidity%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 21 Nov 2018 08:42:35 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/solidity%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description> 安装nodejs  nodejs的版本必须大于8.0.0 下载地址 https://nodejs.org/en/download/
配置npm的镜像仓库
命令行指定
npm --registry https://registry.npm.taobao.org info underscore 编辑 ~/.npmrc 加入下面内容 registry = https://registry.npm.taobao.org   npm install remix-ide -g
 remix-ide
  </description>
    </item>
    
    <item>
      <title>未来怅想</title>
      <link>https://IgarashiTakashi.github.io/post/%E6%9C%AA%E6%9D%A5%E6%80%85%E6%83%B3/</link>
      <pubDate>Sat, 20 Oct 2018 09:30:12 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/%E6%9C%AA%E6%9D%A5%E6%80%85%E6%83%B3/</guid>
      <description>人类终将灭绝 熵增
恐龙的进化到顶时他的灭绝日期也不远了
人类也一样，可能还会更快
但下一代的主宰也不是机器人
除非。。。</description>
    </item>
    
    <item>
      <title>Hyperledger_Sawtooth_Lake学习笔记</title>
      <link>https://IgarashiTakashi.github.io/post/hyperledger_sawtooth_lake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 19 Oct 2018 21:36:25 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/hyperledger_sawtooth_lake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>超级账本Sawtooth Lake的两个主要特点:  流逝时间证明(Proof of Elapsed Time,PoET) 事务族(Transaction Families)  PoET简单说就是：随机选择所有参与节点的等待时间，最早苏醒的节点进行提交广播
事务族：运用一种存储资产所有权记录的机制(SCTP)，结合对象基础架构、数据模型和事务语言，是一套成熟的供应链追溯概念。</description>
    </item>
    
    <item>
      <title>收藏乐评 《四季ノ呗》</title>
      <link>https://IgarashiTakashi.github.io/post/%E6%94%B6%E8%97%8F%E4%B9%90%E8%AF%84-%E5%9B%9B%E5%AD%A3%E3%83%8E%E5%91%97/</link>
      <pubDate>Thu, 04 Oct 2018 17:55:42 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/%E6%94%B6%E8%97%8F%E4%B9%90%E8%AF%84-%E5%9B%9B%E5%AD%A3%E3%83%8E%E5%91%97/</guid>
      <description>《四季ノ呗》为2004年由渡边信一郎导演的动画《混沌武士》的片尾曲。
在nujabes的高水平配乐下，jazz hiphop，嘻哈，和风，武士，浪人时髦元素的狂欢下，这首ED在动画每一集的结束响起时，却带着一种隐忍的克制。刨去鸡飞狗跳的喧闹，一下沉缓下来却又不那么循规蹈矩的曲风与唱调，将四季描绘的似镜头前刺眼却无法聚焦的油画，春华夏虫秋实冬影，不比平常那些咏叹春樱秋枫亦唯美亦哀怨的词句，是更平实视觉更宽广的写真。
MINMI的略带慵懒的唱腔，奇异的念词部分，平静轻快中却透着说不明的无奈愁绪，像是隔着层磨砂纸挠搔，心中道不清的痒愈演愈烈。
“舞动的山菜宣告春季的到来，
夏日来临的宇治原野上绿草被晒到干黄，
登上秋季的圆月祝福，
越过冬季重新计数光阴。”
歌唱四季，歌唱与你的四季。四季歌的奇妙之处在于引导回忆与触碰也许早已不那么敏感的心绪。毕竟在时间巨兽的爪下，旅人的命运在建立、深化关系与将其从实体转化为心灵慰藉中轮转。
——仁、无幻、风都是这样。
他们在旅途中各背负着各自的过往，相遇相知，在洒满阳光的向日葵田中相离，找寻自己生命最初缺失的东西。或暴力或怪诞或平凡或治愈的故事，存在于他们的这段旅程中，刻印在他们心中的某个角落，在最终的三岔口之后，也许终被藏入心迷宫，也许时时被掏出晾晒。从审美角度来看，他们酷的率性，而现实却无可避免的让观者感到一份从轻快歌声中掩盖不住的悲凉。
关于时间，友情，旅伴，分离的种种，四季轮转用一种极其文艺婉转的方式向我们阐述，它抚平生命中的那些涟漪。当歌曲再次响起，似乎一切又回到原点。离开，也许永远也不会再次相遇，但戏中戏外的人们都明白，生命已有了不同的意义，以最好的方式结束，是最潇洒的告别。然后前奏响起，眼前的向日葵田又浮现，也许这便是过着浪人生活的武士最能感悟岁月之歌。
“葉月から三月雲とからむ月
从八月到三月云月交缠
もういつか帰らぬことに
总有天还是要归去”
《四季ノ呗》-MINMI：http://music.163.com/#/song?id=4909229&amp;amp;market=baiduqk</description>
    </item>
    
    <item>
      <title>HyperledgerFabricNote</title>
      <link>https://IgarashiTakashi.github.io/post/hyperledgerfabricnote/</link>
      <pubDate>Fri, 07 Sep 2018 22:54:34 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/hyperledgerfabricnote/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The End,The New</title>
      <link>https://IgarashiTakashi.github.io/post/the-endthe-new/</link>
      <pubDate>Sat, 18 Aug 2018 23:11:18 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/the-endthe-new/</guid>
      <description>DLT特点 需要是授权网络；转账操作要安全可信；没有挖矿的概念；可编程</description>
    </item>
    
    <item>
      <title>Ten common psychological effects</title>
      <link>https://IgarashiTakashi.github.io/post/ten-common-psychological-effects/</link>
      <pubDate>Fri, 17 Aug 2018 20:53:49 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/ten-common-psychological-effects/</guid>
      <description> Clustering Illusion Anchoring Effect Servivorship Bias Body Negative Deflection to the Result The Kuleshov Effect Hard-to-Reach Effect The fear of Beauty Pratfall Effect The Paradox of Choice  </description>
    </item>
    
    <item>
      <title>lifeWords</title>
      <link>https://IgarashiTakashi.github.io/post/lifewords/</link>
      <pubDate>Wed, 08 Aug 2018 11:27:38 +0800</pubDate>
      
      <guid>https://IgarashiTakashi.github.io/post/lifewords/</guid>
      <description>在你降临世上的那一天，太阳接受了行星的问候</description>
    </item>
    
  </channel>
</rss>